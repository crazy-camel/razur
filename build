#!/usr/bin/env perl

use utf8;
use strict;
use warnings;

use feature ":5.16";
use Time::Piece;

no warnings 'experimental::smartmatch';

use lib 'lib';

use Getopt::Long;
use JSON::MaybeXS;
use Path::Tiny 'path';
use Mustache::Simple;


use Data::Dump 'dump';

# ######################################################################
# # Defaults
# ######################################################################

my $dirname = "dist";
my $type    = "cgi-bin";

my $base = path( $0 )->parent();


# ######################################################################
# # Initialization
# ######################################################################

GetOptions(
    "dist=s" => \$dirname,
    "type=s" => \$type
);    # flag

my $config = config(
    type => $type,
    dist => $dirname
);


my $dist = $base->child( $dirname );


# ######################################################################
# # Main
# ######################################################################

foreach my $action ( @{ $config->{ 'build' } } )
{
    given ( $action->{ 'action' } )
    {
        when ( 'clear' )  { clear( $action->{ 'path' } ) }
        when ( 'make' )   { make( $action->{ 'path' } ) }
        when ( 'clone' )  { clone( $action->{ 'src' }, $action->{ 'path' } ) }
        when ( 'weave' )  { weave( $action->{ 'src' }, $action->{ 'path' } ) }
        when ( 'concat' ) { concat( $action->{ 'path' }, @{ $action->{ 'src' } } ) }
    }

}

# ######################################################################
# # Actions
# ######################################################################

# ======================================================================
# (@function) clear -clears a directory
# ----
# (@p) <string> - directory required to clear
# ----
# (@r) void
# ======================================================================
sub clear
{
    print console( '[clear]','clearning directory and children for', $_[0] );
    $base->child( $_[ 0 ] )->remove_tree( { safe => 0 } );
}

# ======================================================================
# (@function) make - creates a new directory (deep safe - "directory/subdirectory" will work)
# ----
# (@p) <string> - path to create
# ----
# (@r) void
# ======================================================================
sub make
{
    print console( '[make]','making the new directory', $_[0]);
    $base->child( $_[ 0 ] )->mkpath;
}

# ======================================================================
# (@function) copy - copies file and/or directories to another location
# ----
# (@p) <string> - file or directory
# ----
# (@r) void
# ======================================================================
sub clone
{
    my ( $from, $to ) = map { $base->child( $_ ) } @_;

    if ( $from->is_file() )
    {
        print console('[clone]','copied',$from->stringify,'to',$to->stringify);

        return $from->copy( $to->stringify );
    }

    my $iter = $from->iterator({
        recurse         => 1,
        follow_symlinks => 1,
    });

    my $count = 0;

    while ( my $path = $iter->() ) {

        next if ( $path->is_dir );

        my $npath = $path;

        $npath =~ s/^$from\//$to\//;

        $path->copy( path( $npath )->touchpath );

        $count++;
    }

    print console('[clone]','copied',$from->stringify,'to',$to->stringify, "($count files)");

    return 1;
}

# ======================================================================
# (@function) concat - concate a series of files into one file
# ----
# (@p) <array> - array of source files
# (@p) <string> - filename to write the concated files
# ----
# (@r) void
# ======================================================================
sub concat
{
	my ( $src, @files ) = map { $base->child( $_ ) } @_;

	# step 1, lets make sure we can write to the path
	 my @content = ();

	 if ( ! $src->parent->is_dir() )
     {
        $src->parent()->mkdir();
     }

    push @content, $_->lines_utf8() for ( @files );

     # now write the file
     $src->spew_utf8( @content );
}


# ======================================================================
# (@function) weave - build a src file with all it's parts
# ----
# (@p) <string> - template file
# (@p) <string> - path to write complete
# ----
# (@r) <string> - complete file
# ======================================================================
sub weave
{
    my ( $src, $dest ) = map { $base->child( $_ ) } @_;

    my $tache = Mustache::Simple->new( extension => 'perl', delimiters => [ '#{{', '}}' ] );

    # now write the file
    return $dest->touchpath->spew_utf8( $tache->render( $src->parent->stringify.'/'.$src->basename(qr/.perl/) , {} ) );
}

# ######################################################################
# # Helpers
# ######################################################################

# ======================================================================
# (@function) config - loads the 'build.json' file
# ----
# (@p) <hash_key_value> - additional key => value parameters to overload
# 						  the config file with
# ----
# (@r) <hash> - properties for the build
# ======================================================================
sub config
{
    my $tache = Mustache::Simple->new( extension => 'json' );

    my $json = $tache->render('build', { runtime => { @_ } } );

    # lets get the parameters to preparse the build info
    
    return decode_json $json;
}

# ======================================================================
# (@function) lookup - looks up values in a hash using dot-notation
# ----
# (@p) <hash> - the hash to lookup against
# (@p) <string> - the key to inspect against
# ----
# (@r) <string> - value of dot-notation lookup
# ======================================================================
sub lookup
{
    my ( $dataset, $index ) = @_;

    my $response = $dataset;

    foreach my $key ( split /\./, $index )
    {
        $response = $response->{ $key } if ( $response->{ $key } );
    }

    return $response;
}


# ======================================================================
# (@function) weave - generates the complete template
# ----
# (@p) <hash> - the hash to lookup against
# (@p) <string> - the key to inspect against
# ----
# (@r) <string> - value of dot-notation lookup
# ======================================================================
sub console
{
    return '[',localtime()->strftime(),'] ',join( ' ', @_ ), "\n";
}
